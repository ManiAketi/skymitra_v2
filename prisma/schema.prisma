// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phoneNumber    String
  password       String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  notifications  Notification[]
}

model ServiceProvider {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phoneNumber    String
  password       String
  state          String
  district       String
  services       Service[]
  availability   Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  images         Image[]
  notifications  Notification[]
}

model Service {
  id                String          @id @default(cuid())
  name              String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bookings          Booking[]
}

model Booking {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String
  service           Service         @relation(fields: [serviceId], references: [id])
  serviceId         String
  status            BookingStatus
  date              DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Image {
  id                String          @id @default(cuid())
  url               String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Notification {
  id                String    @id @default(cuid())
  content           String
  isRead            Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String?
}

enum Role {
  USER
  SERVICE_PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}